package com.api.avatarbackend.servicesImpl;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import com.api.avatarbackend.entities.GiftDetails;
import com.api.avatarbackend.entities.GiftPurchasedHistory;
import com.api.avatarbackend.entities.GiftSpendingHistory;
import com.api.avatarbackend.entities.UserGiftInfo;
import com.api.avatarbackend.entities.UserProfile;
import com.api.avatarbackend.models.request.GiftPurchasedHistoryRequest;
import com.api.avatarbackend.models.request.GiftRequest;
import com.api.avatarbackend.models.request.GiftSendRequest;
import com.api.avatarbackend.repository.GiftPurchasedHistoryRepo;
import com.api.avatarbackend.repository.GiftRepo;
import com.api.avatarbackend.repository.UserProfileRepo;
import com.api.avatarbackend.services.GiftServiceInterface;


@Service
public class GiftService implements GiftServiceInterface {

	private final GiftRepo giftRepo;
	private final GiftPurchasedHistoryRepo giftHistoryRepo;
	private final UserProfileRepo userProfileRepo;
	
	
	public GiftService(GiftRepo giftRepo,GiftPurchasedHistoryRepo giftHistoryRepo,UserProfileRepo userProfileRepo) {
		this.giftRepo = giftRepo;
		this.giftHistoryRepo=giftHistoryRepo;
		this.userProfileRepo=userProfileRepo;
	}

	

	
	
	
	
	@Override
    public GiftDetails saveGiftDetails(GiftRequest giftRequest) {
        GiftDetails giftDetails = new GiftDetails();
        giftDetails.setUrl(giftRequest.getUrl());
        giftDetails.setPrice(giftRequest.getPrice());
        giftDetails.setCurrency(giftRequest.getCurrency());
        giftDetails.setGiftName(giftRequest.getGiftName());
        giftDetails.setOperatorId(giftRequest.getOperatorId());
        giftDetails.setPackName(giftRequest.getPackName());
        giftDetails.setOperatorId(giftRequest.getOperatorId());
        giftDetails.setServiceId(giftRequest.getServiceId());
        
//        diamondDetails.setId(diamondRequest.getId());
        giftRepo.save(giftDetails);
        return  giftDetails;    
	}
	
	
	
	
	
	
	
	@Override
    public List<GiftDetails> getAllGiftDetails() {
		List<GiftDetails> giftList = giftRepo.findAll();
		return giftList;
    }
	

	@Override
    public boolean deleteGiftDetails(GiftDetails giftDetails) {
		try {
			String id=giftDetails.getId();
			giftRepo.deleteById(id);
		    return true;
		}
		catch(Exception e) {
			return false;
		}
    }
	
	 @Override
	    public GiftDetails getGiftDetailsById(GiftDetails giftDetails) {
		 String id=giftDetails.getId();
		 
		 GiftDetails d=giftRepo.findById(id).orElse(null);
		 System.out.println("gfhgfh"+id);
		 System.out.println(d);
	        return d;
	    }
	
	 
	 @Override
	 public GiftDetails updateGiftDetails(GiftDetails giftDetails) {
		 GiftDetails existingGiftDetails = giftRepo.findById(giftDetails.getId()).orElse(null);
	     // Update fields based on your logic
		 existingGiftDetails.setPrice(giftDetails.getPrice());
		 existingGiftDetails.setCurrency(giftDetails.getCurrency());
		 existingGiftDetails.setId(giftDetails.getId());
	     giftRepo.save(existingGiftDetails);
	     return existingGiftDetails;
	 }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@Override
    public GiftPurchasedHistory saveGiftPurchasedHistory(GiftPurchasedHistoryRequest historyRequest) {
        GiftPurchasedHistory purchasedHistory = new GiftPurchasedHistory();
        purchasedHistory.setGiftId(historyRequest.getGiftId());
        purchasedHistory.setUserId(historyRequest.getUserId());
 
        purchasedHistory.setPurchaseOn(LocalDateTime.now());
        return giftHistoryRepo.save(purchasedHistory);
    }


    @Override
    public GiftPurchasedHistory getGiftPurchasedHistoryById(GiftPurchasedHistory request) {
        return giftHistoryRepo.findById(request.getId()).orElse(null);
    }

 
    
    @Override
    public List<GiftPurchasedHistory> getAllGiftPurchasedHistoryByUserId(GiftPurchasedHistoryRequest giftPurchasedHistoryRequest ) {
    	String userId=giftPurchasedHistoryRequest.getUserId();
        return giftHistoryRepo.findByUserId(userId);
    }
 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    @Override
    public GiftPurchasedHistory sendGift(GiftSendRequest giftSendRequest) {
        String userId = giftSendRequest.getUserId();
        String giftId = giftSendRequest.getGiftId();

        if (userId != null) {
            // Check if the user has enough gifts to spend
        	UserProfile user= 
            int giftCount = userGiftInfo.getGiftCounts(giftId);

            if (giftCount >= count) {
                // Deduct the gifts
                userGiftInfo.decrementGiftCount(giftId);
                
                // Record the gift spending history (you may want to create a separate repository for this)
                GiftSpendingHistory giftSpendingHistory = new GiftSpendingHistory();
                giftSpendingHistory.setUserId(id);
                giftSpendingHistory.setGiftId(giftId);
                giftSpendingHistory.setSpendCount(count);
                giftSpendingHistory.setSpendOn(LocalDateTime.now());
                
                // Update the user profile with the deducted gift information
                updateGiftInfo(giftId, count);

                // Return a success message or any other relevant information
                return "Gift spent successfully.";
            } else {
                return "Not enough gifts to spend.";
            }
        } else {
            return "UserGiftInfo not initialized.";
        }
    }
        
        
        
        
        
        
        
        
        
        
        
       

    }
    
    
    
    
    
    
    
    
    
    
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


}
