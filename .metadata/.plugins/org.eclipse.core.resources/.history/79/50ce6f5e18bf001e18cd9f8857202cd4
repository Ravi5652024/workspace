package com.example.demo.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.DiamondDetails;
import com.example.demo.entity.GiftDetails;
import com.example.demo.entity.GiftPurchasedHistory;
import com.example.demo.helperclasses.GiftHelper;
import com.example.demo.request.DiamondRequest;
import com.example.demo.request.GiftPurchasedHistoryRequest;
import com.example.demo.request.GiftRequest;
import com.example.demo.response.GenericRes;
import com.example.demo.response.GiftResponse;
import com.example.demo.service.GiftServiceInterface;

import com.example.demo.utils.URLConstants;

@RestController

@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping(URLConstants.API_VERSION + URLConstants.GIFT)

public class GiftController {

	private final GiftServiceInterface giftServiceInterface;

	public GiftController(GiftServiceInterface giftServiceInterface) {
		this.giftServiceInterface = giftServiceInterface;
		
	}

	GiftHelper helper = new GiftHelper();

	@PostMapping("/save")
	public ResponseEntity<GiftResponse> addGift(@RequestBody GiftRequest giftRequest) {
		GiftDetails giftDetails = giftServiceInterface.addGift(helper.mapToGiftDetails(giftRequest));
		return new ResponseEntity<GiftResponse>(helper.mapToGiftResponse(giftDetails), HttpStatus.ACCEPTED);
	}

	@GetMapping(URLConstants.GIFT_DETAIL)
	public ResponseEntity<GenericRes<List<GiftResponse>>> getAllGifts() {
		List<GiftDetails> giftList = giftServiceInterface.getAllGift();
		List<GiftResponse> giftResponseList = giftList.stream().map(helper::mapToGiftResponse)
				.collect(Collectors.toList());

		GenericRes<List<GiftResponse>> response = new GenericRes<>(200, "OK", "Success", giftResponseList);
		return ResponseEntity.ok(response);
	}
	
	
	
	
	
	
	
	@PostMapping("GiftDetails/create")
    public ResponseEntity<GenericRes<GiftDetails>> saveGiftDetails(@RequestBody GiftRequest giftRequest) {
		GiftDetails newDetails = giftServiceInterface.saveGiftDetails(giftRequest);

        GenericRes<GiftDetails> response = new GenericRes<>(200, "OK", "DIAMOND_DETAILS_CREATED", newDetails);
        return ResponseEntity.ok(response);
    }
 
 
 
 
 @GetMapping("GiftDetails/get")
    public ResponseEntity<GenericRes<GiftDetails>> getGiftDetailsById(@RequestBody GiftDetails giftDetail) {
	    GiftDetails newDetails = giftServiceInterface.getGiftDetailsById(giftDetail);

        if (newDetails != null) {
            GenericRes<GiftDetails> response = new GenericRes<>(200, "OK", "GIFT_DETAILS_FOUND", newDetails);
            return ResponseEntity.ok(response);
        } else {
            GenericRes<GiftDetails> response = new GenericRes<>(404, "NOT_FOUND", "GIFT_DETAILS_NOT_FOUND", null);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        }
    }
 
 
 
 @GetMapping(URLConstants.DIAMOND_DETAIL)
    public ResponseEntity<List<GenericRes<GiftDetails>>> getAllGiftDetails() {
        List<GiftDetails> giftDetailsList = giftServiceInterface.getAllGiftDetails();

        List<GenericRes<GiftDetails>> responseList = giftDetailsList.stream()
                .map(giftDetails -> new GenericRes<>(200, "OK", "GIFT_DETAILS_FOUND", giftDetails))
                .collect(Collectors.toList());

        return ResponseEntity.ok(responseList);
    }
 
 

 @PutMapping("DiamondDetails/update")
    public ResponseEntity<GenericRes<DiamondDetails>> updateDiamondDetails(
    		@RequestBody DiamondDetails diamondRequest) {
        DiamondDetails updatedDiamondDetails = diamondServiceInterafce.updateDiamondDetails(diamondRequest);

        if (updatedDiamondDetails != null) {
            GenericRes<DiamondDetails> response = new GenericRes<>(200, "OK", "DIAMOND_DETAILS_UPDATED", updatedDiamondDetails);
            return ResponseEntity.ok(response);
        } else {
            GenericRes<DiamondDetails> response = new GenericRes<>(404, "NOT_FOUND", "DIAMOND_DETAILS_NOT_FOUND", null);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        }
    }

 
 
 
 
 
 @DeleteMapping("DiamondDetails/delete")
    public ResponseEntity<GenericRes> deleteDiamondDetails(@RequestBody DiamondDetails diamondDetail) {
        boolean isDeleted = diamondServiceInterafce.deleteDiamondDetails(diamondDetail);

        if (isDeleted) {
            GenericRes response = new GenericRes<>(200, "OK", "DIAMOND_DETAILS_DELETED", "Deleted");
            return ResponseEntity.ok(response);
        } else {
            GenericRes response = new GenericRes<>(404, "NOT_FOUND", "DIAMOND_DETAILS_NOT_FOUND", "Not Found");
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        }
    }
 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	@PostMapping(URLConstants.GET_GIFT)
	public ResponseEntity<GenericRes> saveGiftPurchase(@RequestBody GiftPurchasedHistoryRequest giftHistoryRequest) {
		GiftPurchasedHistory giftHistory = giftServiceInterface.saveGiftPurchase(helper.mapToGiftDetails(giftHistoryRequest));

		GenericRes response = new GenericRes<>(200, "OK", "SUBSCRIBED", giftHistory);
		return ResponseEntity.ok(response);
	}

}
