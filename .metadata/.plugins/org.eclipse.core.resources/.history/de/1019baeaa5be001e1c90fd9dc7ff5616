package com.example.demo.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.DiamondDetails;
import com.example.demo.entity.DiamondPurchasedHistory;
import com.example.demo.entity.DiamondUsageRate;
import com.example.demo.helperclasses.DiamondHelper;
import com.example.demo.request.DiamondPurchasedHistoryRequest;
import com.example.demo.request.DiamondRequest;
import com.example.demo.request.DiamondUsageRequest;
import com.example.demo.response.DiamondResponse;
import com.example.demo.response.GenericRes;
import com.example.demo.service.DiamondServiceInterface;

import com.example.demo.utils.URLConstants;

@RestController
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping(URLConstants.API_VERSION + URLConstants.DIAMOND)

public class DiamondController {



	private final DiamondServiceInterface diamondServiceInterafce;
	


	public DiamondController(DiamondServiceInterface diamondServiceInterafce) {
		this.diamondServiceInterafce = diamondServiceInterafce;
		

	}

	DiamondHelper helper = new DiamondHelper();
	
	

	 @PostMapping("/create")
	    public ResponseEntity<GenericRes<DiamondDetails>> createDiamondDetails(@RequestBody DiamondRequest diamondRequest) {
	        DiamondDetails diamondDetails = diamondServiceInterafce.createDiamondDetails(diamondRequest);

	        GenericRes<DiamondDetails> response = new GenericRes<>(200, "OK", "DIAMOND_DETAILS_CREATED", diamondDetails);
	        return ResponseEntity.ok(response);
	    }
	 
	 
	 
	 
	 @GetMapping("/get")
	    public ResponseEntity<GenericRes<DiamondDetails>> getDiamondDetailsById(@RequestBody String id) {
	        DiamondDetails diamondDetails = diamondServiceInterafce.getDiamondDetailsById(id);

	        if (diamondDetails != null) {
	            GenericRes<DiamondDetails> response = new GenericRes<>(200, "OK", "DIAMOND_DETAILS_FOUND", diamondDetails);
	            return ResponseEntity.ok(response);
	        } else {
	            GenericRes<DiamondDetails> response = new GenericRes<>(404, "NOT_FOUND", "DIAMOND_DETAILS_NOT_FOUND", null);
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
	        }
	    }
	 
	 
	 
	 @GetMapping(URLConstants.DIAMOND_DETAIL)
	    public ResponseEntity<List<GenericRes<DiamondDetails>>> getAllDiamondDetails() {
	        List<DiamondDetails> diamondDetailsList = diamondServiceInterafce.getAllDiamondDetails();

	        List<GenericRes<DiamondDetails>> responseList = diamondDetailsList.stream()
	                .map(diamondDetails -> new GenericRes<>(200, "OK", "DIAMOND_DETAILS_FOUND", diamondDetails))
	                .collect(Collectors.toList());

	        return ResponseEntity.ok(responseList);
	    }
	 
	 

	 @PutMapping("/update")
	    public ResponseEntity<GenericRes<DiamondDetails>> updateDiamondDetails(
	    		@RequestBody String id, @RequestBody DiamondRequest diamondRequest) {
	        DiamondDetails updatedDiamondDetails = diamondServiceInterafce.updateDiamondDetails(id, diamondRequest);

	        if (updatedDiamondDetails != null) {
	            GenericRes<DiamondDetails> response = new GenericRes<>(200, "OK", "DIAMOND_DETAILS_UPDATED", updatedDiamondDetails);
	            return ResponseEntity.ok(response);
	        } else {
	            GenericRes<DiamondDetails> response = new GenericRes<>(404, "NOT_FOUND", "DIAMOND_DETAILS_NOT_FOUND", null);
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
	        }
	    }

	 
	 
	 
	 
	 
	 @DeleteMapping("/delete")
	    public ResponseEntity<GenericRes<String>> deleteDiamondDetails(@RequestBody String id) {
	        boolean isDeleted = diamondServiceInterafce.deleteDiamondDetails(id);

	        if (isDeleted) {
	            GenericRes<String> response = new GenericRes<>(200, "OK", "DIAMOND_DETAILS_DELETED", id);
	            return ResponseEntity.ok(response);
	        } else {
	            GenericRes<String> response = new GenericRes<>(404, "NOT_FOUND", "DIAMOND_DETAILS_NOT_FOUND", id);
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
	        }
	    }
	 
	
	 
	 
	 
	 
	 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	@PostMapping(URLConstants.GET_DIAMOND)
	public ResponseEntity<GenericRes> saveDiamondPurchased(
			@RequestBody DiamondPurchasedHistoryRequest diamondHistoryRequest) {
		DiamondPurchasedHistory diamondPurchasedHistory = diamondServiceInterafce
				.saveDiamondPurchased(helper.mapToPurchasedHistory(diamondHistoryRequest));

		GenericRes response = new GenericRes<>(200, "OK", "PURCHASED", diamondPurchasedHistory);
		return ResponseEntity.ok(response);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

    @PostMapping("/saveusagerate")
    public ResponseEntity<GenericRes<DiamondUsageRate>> saveUsageRate(@RequestBody DiamondUsageRequest diamondUsageRequest) {
    	DiamondUsageRate savedDiamond = diamondServiceInterafce.saveUsageRate(diamondUsageRequest);
        GenericRes<DiamondUsageRate> response = new GenericRes<>(200, "OK", "DIAMOND_SAVED", savedDiamond);
        return ResponseEntity.ok(response);
    }

    @GetMapping("/getUsageRate")
    public ResponseEntity<GenericRes<DiamondUsageRate>> getDiamondById(@PathVariable String id) {
        // Assuming you have a method like getDiamondUsageRateById in your service
        DiamondUsageRate diamondUsageRate = diamondServiceInterafce.getUsageRateById(id);
        
        if (diamondUsageRate != null) {
            GenericRes<DiamondUsageRate> response = new GenericRes<>(200, "OK", "DIAMOND_FOUND", diamondUsageRate);
            return ResponseEntity.ok(response);
        } else {
          
            GenericRes<DiamondUsageRate> response = new GenericRes<>(404, "Not Found", "DIAMOND_NOT_FOUND", null);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        }
    }


    @GetMapping("/all")
    public ResponseEntity<GenericRes<List<DiamondUsageRate>>> getAllUsageRate() {
        List<DiamondUsageRate> diamonds = diamondServiceInterafce.getAllUsageRate();
        GenericRes<List<DiamondUsageRate>> response = new GenericRes<>(200, "OK", "DIAMONDS_FOUND", diamonds);
        return ResponseEntity.ok(response);
    }

    @DeleteMapping("/deleteUsageRate")
    public ResponseEntity<GenericRes<String>> deleteUsageRate(@PathVariable String id) {
        boolean deleted = diamondServiceInterafce.deleteUsageRate(id);

        if (deleted) {
            GenericRes<String> response = new GenericRes<>(200, "OK", "Diamond Usage Rate_deleted", id);
            return ResponseEntity.ok(response);
        } else {
            // Handle case when the diamond with the given ID is not found
            GenericRes<String> response = new GenericRes<>(404, "Not Found", "Usage Rate with given Id_NOT_FOUND", id);
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        }
    }
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}
